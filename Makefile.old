.PHONY: clean distclean count_lines

# OS type: Linux/Win DJGPP
ifdef OS
   EXE = .exe
else
   EXE =
endif

CAMLP5_FLAGS = -pp "camlp5o ./extend.cmo"
OCAMLC_FLAGS = -g
OCAMLOPT_FLAGS =
OCAMLC = ocamlc $(OCAMLC_FLAGS)
OCAMLOPT = ocamlopt $(OCAMLOPT_FLAGS)
OCAMLDEP = ocamldep

EXE_FILE = llama$(EXE)
ML_FILES = ast.ml hashcons.ml identifier.ml error.ml types.ml \
		   symbol.ml lexer.ml parser.ml interUtils.ml semantics.ml \
		   intermediate.ml main.ml
MLI_FILES = ast.mli hashcons.mli identifier.mli error.mli types.mli \
			symbol.mli lexer.mli parser.mli interUtils.mli semantics.mli \
			intermediate.mli 
CMO_FILES = $(patsubst %.ml,%.cmo,$(ML_FILES))
CMI_FILES = $(patsubst %.ml,%.cmi,$(ML_FILES))
CMX_FILES = $(patsubst %.ml,%.cmx,$(ML_FILES))
OBJ_FILES = $(patsubst %.ml,%.o,$(ML_FILES))
PARSER_FILES = parser.ml parser.mli parser.output lexer.ml
SRC_FILES = Makefile extend.ml lexer.mll parser.mly \
  $(filter-out Parser.% Lexer.%,$(ML_FILES)) \
  $(filter-out Parser.%,$(MLI_FILES))

all: $(EXE_FILE)

extend.cmo: extend.ml
	$(OCAMLC) -pp "camlp5o pa_extend.cmo q_MLast.cmo" -I +camlp5 -c $<

%.cmo: %.ml %.mli extend.cmo
	$(OCAMLC) $(CAMLP5_FLAGS) -c $<

%.cmx: %.ml extend.cmo
	$(OCAMLOPT) $(CAMLP5_FLAGS) -c $<

%.cmi: %.mli extend.cmo
	$(OCAMLC) $(CAMLP5_FLAGS) -c $<

%.cmo %.cmi: %.ml extend.cmo
	$(OCAMLC) $(CAMLP5_FLAGS) -c $<

.PHONY: all clean count_lines depend

$(EXE_FILE): $(CMO_FILES)
	$(OCAMLC) -o $@ $(CMO_FILES)

parser.ml parser.mli: parser.mly
	ocamlyacc -v parser.mly

lexer.ml: lexer.mll
	ocamllex lexer.mll

-include .depend

depend: $(ML_FILES) $(MLI_FILES) extend.cmo 
	$(OCAMLDEP) $(CAMLP5_FLAGS) \
          $(filter-out extend.cmo,$^) > .depend

clean:
	$(RM) $(CMO_FILES) $(CMI_FILES) $(CMX_FILES) $(OBJ_FILES) \
		extend.cm* $(PARSER_FILES) *~

distclean: clean
	$(RM) $(EXE_FILE) .depend

count_lines:
	wc -l $(SRC_FILES)
