let mmult (a : array [*, *] of int) (b : array [*, *] of int) (c : array [*,
  *] of int) : unit =
  if dim 2 a = dim 1 b && dim 1 c = dim 1 a && dim 2 c = dim 2 b then
    for i = 0 to
      dim 1 c - 1 do
      for j = 0 to
        dim 2 c - 1 do
        c[i, j] := 0;
        for k = 0 to dim 2 a - 1 do
          c[i, j] := !c[i, j] + !a[i, k] * !b[k, j]
        done
      done
    done

let mutable seed : int

let init : unit = seed := 65

let minit (m : array [*, *] of int) : unit =
  for i = 0 to
    dim 1 m - 1 do
    for j = 0 to
      dim 2 m - 1 do
      seed := (!seed * 137 + 2 * i + j) mod 101;
      m[i, j] := !seed
    done
  done

let mprint (m : array [*, *] of int) : unit =
  for i = 0 to
    dim 1 m - 1 do
    for j = 0 to dim 2 m - 1 do
      print_int !m[i, j];
      print_string " "
    done;
    print_string "\n"
  done
(* WRONG *)
(* (* *)
let main : unit =
  let mutable x [3, 4] : int
  and mutable y [4, 5] : int
  and mutable z [3, 5] : int in
  minit x;
  minit y;
  mprint x;
  print_string "\ntimes\n\n";
  mprint y;
  print_string "\nmakes\n\n";
  mmult x y z;
  mprint z
